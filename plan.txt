O executar do script tem que vir um input

o checkers é necessario? ou opcional?

por enquanto vai ser opcional

getInput retorna a instancia necessaria

getInput.getValue retonarna o valor que precisa.

execute precisa retornar o getInput

execute roda o script - roda o checkers e retorna o input
                            - se o checkers for true = prossegue
                            - se não = ele roda o design denovo

confirm script é sobre yes or not
uma question vai aparecer e vai pedir confirmação
essa confirmação precisa estar associado a uma question
                                    - talvez por um map (cada question é uma chave e a resposta é seu valor) - private
                                    - ou linkedList (a ordem vai importar - ela vai percorrer até o intem desejado)

linkedlist pode ser bom se forem poucas perguntas, mas se forem grandes, talvez map pode ser melhor. (futura att)
quando o design rodar, vai pedir input e vai add na linked list
o executar precisara retornar um input (em string)
mas se são varios...
se for possivel retornar uma lista de objetos em string. mas que retorna string..
esse retorno precisa ser manipulável (com if-else)
mas serão 'vários retornos'
desse jeito executar teria que ser void, e o getInput seria definido no executar
cada getInput seria diferente, um retorna apenas um input, o outro deveria trabalhar com mais inputs
eu poderia limitar a aplicação para ter um input, mas daria mais objetos. é bom?

pra limitar eu precisaria apenas limitar o tanto de vez que um input é chamado

(se for confirm, addQuestion precisaria rodar 1 vez (nesse caso, seria addFirst))
só iria ter uma pergunta e 1 input (pra confirmScript)
ListScript podem ter várias perguntas, mas sempre terá um input

fazendo isso, não preciso me preocupar com mais possibilidades de input

input quando é instanciado, já precisa dar o valor
isso é bom?
talvez ele precise ser chamado no getInput?

como fazer com que uma variavel seja igual a uma instancia? - getInstance?

return newInstance()
variavel = newInstance()


========== novo codigo ============= (;-;)

prompt.getScript().execute(prompt.getQuestionList());

isso aqui está ruim.
um objeto deve retornar um valor por si só
o script retorna o valor por si só
é melhor que retorne o objeto input ou o valor input por si só?

retornar o valor por sí só significa mais 'concreto'
retornar o objeto input significa mais 'flexibilidade'

a pessao que tiver input, só terá uma método para usa-lo, oque já é mais concreto por sí só.

retornar o input dentro da classe pode significar mais 'fluida' dentro dela' - getInstance() ?

assim que a classe é instanciada, o scanner ja roda, mas ele poderia rodar apenas com um método run

não é bom que input seja instanciado publicamente, ele teria que estar ligado a um script: ambos são requests?

prompt.getScript.getInput - retorna a string?
ou prompt.getResponse()?


// comandos

como eles vão se sair?

ele será utilitária? prompt é um comando?

se prompt for um comando, qual é o signficado?

um prompt e um script é um comando, mas juntos

obrigatoriamente um prompt precisa de um script?
sim?
comando, roda um prompt (se o script n for definido por algum motivo, vai dar erro?)

um prompt n pode rodar o script por si só, se for o caso
um comando sim, mas precisaria ter acesso ao script...

comando ter acesso = classe em comum - ambos são uma CLI?

um prompt também é uma CLI

ambos são executaveis, um prompt nao.

se for o caso, o script que vai operar em cima do prompt, nao o oposto

script(prompt)
command(script(prompt))

acho justo.

nucleo
    - command
    - prompt
response
    - script
    - input
scripts
    - list
    - confirm
    - input